#include<iostream>
using namespace std;

struct node
{
	int data; 
	struct node *pLeft; 
	struct node *pRight;
};
typedef struct node NODE;
typedef NODE* TREE;

// Khoi tao cay
void KhoiTaoCay(TREE &t)
{
	t = NULL;
}

// Them phan tu vao cay
void ThemNodeVaoCay(TREE &t, int x)
{
	// Neu cay rong
	if (t == NULL)
	{
		NODE *p = new NODE;
		p->data = x;
		p->pLeft = NULL;
		p->pRight = NULL;
		t = p;
	}
	else
	{
		if (x < t->data)
		{
			ThemNodeVaoCay(t->pLeft, x);
		}
		else if (x > t->data)
		{
			ThemNodeVaoCay(t->pRight, x);
		}
	}
}

// In Cay Node-Left-Right
void NLR(TREE t)
{
	if (t != NULL)
	{
		
		cout << t->data << " ";
		NLR(t->pLeft);
		NLR(t->pRight);
	}
}

void LNR(TREE t){
	if (t != NULL)
	{
		LNR(t->pLeft);
		cout << t->data << " ";
		LNR(t->pRight);
	}
}

void LRN(TREE t)
{
	if (t != NULL)
	{
		LRN(t->pLeft);
		LRN(t->pRight);
		cout << t->data << " ";
	}
}

// Tim node the cho
void DiTimNodeTheMang(TREE &X, TREE &Y) {
	// Node trai nhat cay con ben phai
	if (Y->pLeft != NULL)
	{
		DiTimNodeTheMang(X, Y->pLeft);
	}
	else
	{
		X->data = Y->data; 
		X = Y; 
		Y = Y->pRight;
	}
}
// Xoa Node bat ki trong cay
void XoaNode(TREE &t, int data) // Data la gia tri node can xoa
{
	
	if (t == NULL)
	{
		return; 
	}
	else
	{
	
		if (data < t->data)
		{
			XoaNode(t->pLeft, data); 
		}
		else if (data > t->data)
		{
			XoaNode(t->pRight, data); 
		}
		else 
		{
			NODE *X = t;
		
			if (t->pLeft == NULL)
			{
				t = t->pRight; 
			}
			else if (t->pRight == NULL)
			{
				
				t = t->pLeft;
			}
			else
			{
				DiTimNodeTheMang(X, t->pRight);	
			}
			delete X;
		}
	}
}


int main()
{
	TREE t;
	KhoiTaoCay(t);
	int dang;
	while (scanf("%d", &dang) != -1)
	{
		//cin >> dang;
		if (dang == 1)
		{
			int x;
			cin >> x;
			ThemNodeVaoCay(t, x);
		}
		
		else if (dang == 2)
		{
			int x;
			cin >> x;
			XoaNode(t, x);
		}
		else if (dang == 3)
		{
			NLR(t);
			cout << endl;
		}
		else if (dang == 4)
		{
			LNR(t);
			cout << endl;
		}
		else if (dang == 5)
		{
			LRN(t);
			cout << endl;
		}
	}
	return 0;
}
