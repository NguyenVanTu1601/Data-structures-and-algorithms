Duyệt sang trái phải trên dưới 1 cách tối đa gặp * hoặc điểm dừng thì dừng
Kiểm tra tại vị trí cuối xem số bước tới đấy = bao nhiêu


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
struct vitri{
	int hang;
	int cot;
};
int dem[501][501];
int check[501][501];

main(){
	int n, m;
	int t;
	cin >> t;
	while(t--){
		cin >> n >> m;
		char a[n+5][m+5];
		vitri start, end;
		for(int i = -1; i <= n; i++){
			for(int j = -1; j <= m; j++){
				if(i == -1 || i == n || j == -1 || j == m) {
					a[i][j] = '*';
				}
				
				else{
					cin >> a[i][j];
					if(a[i][j] == 'S'){
						start.hang = i;
						start.cot = j;
					}
					if(a[i][j] == 'T'){
						end.hang = i;
						end.cot = j;
					}
					dem[i][j] = 0;
					check[i][j] = 0;
				}
				
			}
		}
		
		
		if(start.hang == end.hang && start.cot == end.cot){
			cout << "YES" << endl;	
		}
		else{
			check[start.hang][start.cot] = 1;
			dem[start.hang][start.cot] = 0;
			queue< vitri>q;
			q.push(start);
			
			while(!q.empty()){
				vitri s = q.front();
				q.pop();
				for(int i = 1; i <= 4; i++){
					if(i == 1){	
						for(int i = s.hang - 1; i >= 0; i--){
							if(check[i][s.cot] == 0){
								if(a[i][s.cot] == '*'){
									//check[i][s.cot] = 1;
									break;
								}
							    else{
								    check[i][s.cot] = 1;
								    if(dem[i][s.cot] == 0 ) dem[i][s.cot] = dem[s.hang][s.cot] + 1;
								    vitri m;
								    m.hang = i;
								    m.cot = s.cot;
								    q.push(m);
							    }
							}
							
						}
					}
					if(i == 2){
						for(int i = s.cot + 1; i < m ; i++){
							if(check[s.hang][i] == 0){
								if(a[s.hang][i] == '*'){
									//check[s.hang][i] = 1;
									break;
								}
							    else{
								    check[s.hang][i] = 1;
								    if(dem[s.hang][i] == 0) dem[s.hang][i] = dem[s.hang][s.cot] + 1;
								    vitri m;
								    m.hang = s.hang;
								    m.cot = i;
								    q.push(m);
							    }
							}
							
						}
					}
					
					if(i == 3){
						for(int i = s.hang + 1; i < n; i++){
							if(check[i][s.cot] == 0){
								if(a[i][s.cot] == '*') {
									//check[i][s.cot] = 1;
									break;
								}
							    else{
								    check[i][s.cot] = 1;
								    if(dem[i][s.cot] == 0) dem[i][s.cot] = dem[s.hang][s.cot] + 1;
								    vitri m;
								    m.hang = i;
								    m.cot = s.cot;
								    q.push(m);
							    }
							}
							
						}
					}
					
					 if(i == 4){
						for(int i = s.cot - 1; i >= 0 ; i--){
							if(check[s.hang][i] == 0){
								if(a[s.hang][i] == '*') {
									//check[s.hang][i] = 1;
									break;
								}
							    else{
								    check[s.hang][i] = 1;
								    if(dem[s.hang][i] == 0) dem[s.hang][i] = dem[s.hang][s.cot] + 1;
								    vitri m;
								    m.hang = s.hang;
								    m.cot = i;
								    q.push(m);
							    }
							}
							
						}
					}
					
					
				}
			}
	
			if(dem[end.hang][end.cot] <= 3 && dem[end.hang][end.cot] >= 1) cout << "YES" << endl;
			else cout << "NO" << endl;
		}
	}
	
	
    return 0;
}
// Edit :  Nguyen Van Tu _ acc 204 _ 430 :))
