Lưu vi trí ban đầu vào queue , lặp trong khi queue ko rỗng và thực hiện
+ Lấy đỉnh queue ra
+ Di chuyển lên trên , xuống dưới , sang trái , sang phải đến khi ko thể di chuyển nếu các vị trí ấy chưa được xét đến ( check = 0)
  sau đó push lại các đỉnh trên , dưới, trái , phải vào queue
+ Số bước đi tới vị trí xét = số bước tại đỉnh + 1; (dem[i+1] = dem[i] + 1)
=> Đếm tại đích chính là kết qả cần tìm 

#include<iostream>
#include<bits/stdc++.h>
using namespace std;
struct vitri{
	int hang;
	int cot;
};
int dem[101][101];
int check[101][101];

main(){
	int n;
	cin >> n;
	char a[n+5][n+5];
	
	for(int i = -1; i <= n; i++){
		for(int j = -1; j <= n; j++){
    // Tạo lớp bao X quanh ma trận ban đầu
			if(i == -1 || i == n || j == -1 || j == n) {
				a[i][j] = 'X';
			}
			else{
				cin >> a[i][j];
				dem[i][j] = 0;
				check[i][j] = 0;
			}
			
		}
	}
	
	vitri x, y;
	cin >> x.hang >> x.cot >> y.hang >> y.cot;
	if(x.hang == y.hang && x.cot == y.cot){
		cout << "0";
		
	}
	else{
		check[x.hang][y.hang] = 1;
		dem[x.hang][y.hang] = 0;
		queue< vitri>q;
		q.push(x);
		
		while(!q.empty()){
			vitri s = q.front();
			q.pop();
      // Tại mỗi đỉnh sẽ di chuyển sang 4 phía => tiết kiệm thời gian duyệt và nó có dạng cây giống cây nhị phân
			for(int i = 1; i <= 4; i++){
      // 1 , 2, 3, 4 tương ứng với đi lên , phải , xuống , trái
				if(i == 1){	
					for(int i = s.hang - 1; i >= 0; i--){
						if(check[i][s.cot] == 0){
							if(a[i][s.cot] == 'X'){
								//check[i][s.cot] = 1;
								break;
							}
						    else{
							    check[i][s.cot] = 1;
							    if(dem[i][s.cot] == 0) dem[i][s.cot] = dem[s.hang][s.cot] + 1;
							    vitri m;
							    m.hang = i;
							    m.cot = s.cot;
							    q.push(m);
						    }
						}
						
					}
				}
				if(i == 2){
					for(int i = s.cot + 1; i < n ; i++){
						if(check[s.hang][i] == 0){
							if(a[s.hang][i] == 'X'){
								//check[s.hang][i] = 1;
								break;
							}
						    else{
							    check[s.hang][i] = 1;
							    if(dem[s.hang][i] == 0) dem[s.hang][i] = dem[s.hang][s.cot] + 1;
							    vitri m;
							    m.hang = s.hang;
							    m.cot = i;
							    q.push(m);
						    }
						}
						
					}
				}
				
				if(i == 3){
					for(int i = s.hang + 1; i < n; i++){
						if(check[i][s.cot] == 0){
							if(a[i][s.cot] == 'X') {
								//check[i][s.cot] = 1;
								break;
							}
						    else{
							    check[i][s.cot] = 1;
							    if(dem[i][s.cot] == 0) dem[i][s.cot] = dem[s.hang][s.cot] + 1;
							    vitri m;
							    m.hang = i;
							    m.cot = s.cot;
							    q.push(m);
						    }
						}
						
					}
				}
				
				 if(i == 4){
					for(int i = s.cot - 1; i >= 0 ; i--){
						if(check[s.hang][i] == 0){
							if(a[s.hang][i] == 'X') {
								//check[s.hang][i] = 1;
								break;
							}
						    else{
							    check[s.hang][i] = 1;
							    if(dem[s.hang][i] == 0) dem[s.hang][i] = dem[s.hang][s.cot] + 1;
							    vitri m;
							    m.hang = s.hang;
							    m.cot = i;
							    q.push(m);
						    }
						}
						
					}
				}
				
				
			}
		}
//		for(int i = 0; i < n; i++){
//			for(int j = 0; j < n; j++){
//				cout << dem[i][j]  << "  ";
//			}
//			cout << endl;
//		}
		cout << dem[y.hang][y.cot];
	}
	
    return 0;
}

/*
10
. . . X . . . . . . 
. . X . . X . . . . 
. . . . . . . . . .
. . . . X . . . . .
. . . . X . . . . .
. . . . X . . . . .
. . . . X . . . . .
. . . X . . . . . .
. . . . . . . . . .
. . . . . . . . . .
3 3 7 9
*/

/*
3
.X.
.X.
...
0 0 0 2
*/
//. . . X . . . . . . 
//. . X . . X . . . . 
//. . . . . . . . . .
//. . . o X . . . . .
//. . . . X . . . . .
//. . . . X . . . . .
//. . . . X . . . . .
//. . . X . . . . . o
//. . . . . . . . . .
//. . . . . . . . . .
